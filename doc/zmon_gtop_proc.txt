zmon_gtop_proc(3)
=================

NAME
----
zmon_gtop_proc - zmon gtop pid monitor

SYNOPSIS
--------
----
//  Create a new zmon_gtop_proc
CZMQ_EXPORT zmon_gtop_proc_t *
    zmon_gtop_proc_new (pid_t pid);

//  Destroy the zmon_gtop_proc
CZMQ_EXPORT void
    zmon_gtop_proc_destroy (zmon_gtop_proc_t **self_p);

//  Updates monitoring information
CZMQ_EXPORT void
    zmon_gtop_proc_update(zmon_gtop_proc_t *self, glibtop_cpu *cpu, glibtop_mem *memory, zmon_gtop_proc_t *sys);

//  Returns pid
CZMQ_EXPORT pid_t
    zmon_gtop_proc_pid(zmon_gtop_proc_t *self);

//  Returns CPU used last
CZMQ_EXPORT guint64
    zmon_gtop_proc_cpu_used_last(zmon_gtop_proc_t *self);

//  Sets CPU used last
CZMQ_EXPORT void
    zmon_gtop_proc_set_cpu_used_last(zmon_gtop_proc_t *self, guint64 cpu_used_last);

//  Returns CPU total last
CZMQ_EXPORT guint64
    zmon_gtop_proc_cpu_total_last(zmon_gtop_proc_t *self);

//  Sets CPU total last
CZMQ_EXPORT void
    zmon_gtop_proc_set_cpu_total_last(zmon_gtop_proc_t *self, guint64 cpu_total_last);

//  Returns CPU usage
CZMQ_EXPORT float
    zmon_gtop_proc_cpu(zmon_gtop_proc_t *self);

//  Returns RSS mem
CZMQ_EXPORT float
    zmon_gtop_proc_mem_rss(zmon_gtop_proc_t *self);

//  Print contents of message to stdout
CZMQ_EXPORT void
    zmon_gtop_proc_dump (zmon_gtop_proc_t *self);

//  Self test of this class
CZMQ_EXPORT int
    zmon_gtop_proc_test (bool verbose);
----

DESCRIPTION
-----------

zmon_gtop_proc - zmon gtop pid monitor


EXAMPLE
-------
.From zmon_gtop_proc_test method
----
    //  Simple create/destroy test
    zmon_gtop_proc_t *self = zmon_gtop_proc_new (0);
    assert (self);

    // FIXME memory leak (report bug to glibtop)
    glibtop_init ();

    glibtop_cpu cpu;
    glibtop_mem memory;

    for (int i = 0; i < 4; i++) {
        glibtop_get_cpu (&cpu);
        glibtop_get_mem (&memory);
        zmon_gtop_proc_update (self, &cpu, &memory, 0);
        if (verbose)
            zmon_gtop_proc_dump (self);
        zclock_sleep (500);
        /* setting current values for total and used cpu */
        zmon_gtop_proc_set_cpu_total_last (self, cpu.total);
        zmon_gtop_proc_set_cpu_used_last (self, cpu.user + cpu.nice + cpu.sys);
    }

    glibtop_close ();

    zmon_gtop_proc_destroy (&self);

    if (verbose)
        printf (" * zmon_gtop_proc: ");

    printf ("OK\n");
    return 0;
}
----

SEE ALSO
--------
link:proto[7]
